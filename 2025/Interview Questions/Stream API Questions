âœ… Question 1: Filter Even Numbers
Problem:
Given a list of integers, use the Java Stream API to filter out only the even numbers and collect them into a new list.

Example Input:
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
Expected Output:
[2, 4, 6]
Answer:

Â Â Â Â Â Â Â  List<Integer> evenNumbers = numbers.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .filter(n -> n % 2 == 0)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .collect(Collectors.toList());
âœ… Question 2: Convert Strings to Uppercase
Problem:
Given a list of strings, use the Java Stream API to convert each string to uppercase and collect the results into a new list.

Example Input:
List<String> words = Arrays.asList("apple", "banana", "cherry");
Expected Output:
[APPLE, BANANA, CHERRY]

Answer: 
Â Â Â Â Â Â Â  List<String> uppercased = words.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .map(s -> s.toUpperCase())
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .collect(Collectors.toList());

âœ… Question 3: Count Strings Starting with a Specific Letter
Problem:
Given a list of strings, use the Java Stream API to count how many strings start with the letter "A" (case-insensitive).
Example Input:
List<String> names = Arrays.asList("Alice", "Bob", "Andrew", "alex", "Charlie");
Expected Output:

1 3
2
Answer:

Â Â Â Â Â Â Â  long count = names.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .filter(s -> s.toLowerCase().startsWith("a"))
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .count();


âœ… Question 4: Find the First Element Greater Than 50

Problem:
Given a list of integers, use the Java Stream API to find the first number greater than 50. If no such number exists, return an appropriate message or handle it gracefully.

Example Input:
List<Integer> numbers = Arrays.asList(10, 25, 60, 45, 70);
Expected Output:
Optional<Integer> result = Optional.of(60);

Solution: numbers.stream().filter(n -> n > 50).findFirst();

âœ… Question 5: Sort a List of Strings by Length
Problem:
Given a list of strings, use the Java Stream API to sort the strings based on their length in ascending order.

Example Input:List<String> words = Arrays.asList("apple", "banana", "kiwi", "cherry");
Expected Output:[kiwi, apple, banana, cherry]

Solution : words.stream()
     .sorted((s1, s2) -> s1.length() - s2.length())
     .collect(Collectors.toList());

âœ… Question 6: Sum of Squares
Problem:
Given a list of integers, use the Java Stream API to compute the sum of the squares of all the numbers.

Example Input:
List<Integer> numbers = Arrays.asList(1, 2, 3, 4);
Expected Output: 
1Â² + 2Â² + 3Â² + 4Â² = 30
Solution : 
int sumOfSquares = numbers.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .mapToInt(n -> n * n)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .sum();

âœ… Question 7: Group by First Character
Problem:
Given a list of strings, use the Java Stream API to group the strings by their first character. The result should be a Map<Character, List<String>>.

Example Input:
List<String> words = Arrays.asList("apple", "apricot", "banana", "blueberry", "cherry");
Expected Output:

{
Â  a = [apple, apricot],
Â  b = [banana, blueberry],
Â  c = [cherry]
}
Solution : 
Â Â Â Â Â Â Â  Map<Character, List<String>> grouped = words.stream()
Â Â Â Â Â Â Â Â Â Â Â  .collect(Collectors.groupingBy(word -> word.charAt(0)));

âœ… Question 8: Find the Longest String
Problem:
Given a list of strings, use the Java Stream API to find the longest string in the list. If the list is empty, handle it gracefully using Optional.

Example Input:List<String> words = Arrays.asList("apple", "banana", "kiwi", "watermelon");
Expected Output: Optional<String> result = Optional.of("watermelon");
Solution :
Optional<String> longest = words.stream()
                                .max((s1, s2) -> s1.length() - s2.length());
OR
Optional<String> longest = words.stream()
                                .max(Comparator.comparingInt(String::length));

âœ… Question 9: FlatMap Example â€“ Flatten a List of Lists
Problem:
Given a list of lists of integers, use the Java Stream API to flatten it into a single list of integers.

Example Input:
List<List<Integer>> listOfLists = Arrays.asList(
    Arrays.asList(1, 2, 3),
    Arrays.asList(4, 5),
    Arrays.asList(6, 7, 8)
);
Example Output:
[1, 2, 3, 4, 5, 6, 7, 8]
Solution: 
List<Integer> flattened = listOfLists.stream()
                                     .flatMap(list -> list.stream())
                                     .collect(Collectors.toList());
OR
List<Integer> flattened = listOfLists.stream()
                                     .flatMap(List::stream)
                                     .collect(Collectors.toList());

âœ… Question 10: You have the following class:
class Employee {
    private String name;
    private List<String> projects;

    // constructor, getters
}

And this list:

List<Employee> employees = Arrays.asList(
    new Employee("Alice", Arrays.asList("Alpha", "Beta")),
    new Employee("Bob", Arrays.asList("Beta", "Gamma")),
    new Employee("Charlie", Arrays.asList("Gamma", "Delta"))
);

ðŸ‘‰ Task: Use the Stream API to extract a List<String> of all unique project names across all employees.
Solution:
List<String> uniqueProjects = employees.stream()
    .flatMap(emp -> emp.getProjects().stream())
    .distinct()
    .collect(Collectors.toList());



âœ… Question 11: You have the following class:
class Order {
    private String id;
    private OrderStatus status;

    // constructor, getters
}

enum OrderStatus {
    NEW, IN_PROGRESS, COMPLETED
}
And a list of orders:
List<Order> orders = Arrays.asList(
    new Order("O1", OrderStatus.NEW),
    new Order("O2", OrderStatus.IN_PROGRESS),
    new Order("O3", OrderStatus.NEW),
    new Order("O4", OrderStatus.COMPLETED),
    new Order("O5", OrderStatus.NEW),
    new Order("O6", OrderStatus.IN_PROGRESS)
);

ðŸ‘‰ Task: Use the Stream API to group the orders by status and count how many orders are in each group. Your result should be a map like:
{NEW=3, IN_PROGRESS=2, COMPLETED=1}

Solution:
Map<OrderStatus, Long> orderCountByStatus = orders.stream()
    .collect(Collectors.groupingBy(
        Order::getOrderStatus,
        Collectors.counting()
    ));

âœ… Question 12: You have the following class:
Given:
class Product {
    private String name;
    private String category;

    // constructor, getters
}
and list:
List<Product> products = Arrays.asList(
    new Product("Laptop", "Electronics"),
    new Product("TV", "Electronics"),
    new Product("Apple", "Grocery"),
    new Product("Bread", "Grocery"),
    new Product("Smartphone", "Electronics")
);

ðŸ‘‰ Goal: Produce a Map<String, List<String>> where the key is the category and the value is a list of product names in that category.

Solution:
Map<String, List<String>> productsByCategory = products.stream()
    .collect(Collectors.groupingBy(
        Product::getCategory,
        Collectors.mapping(Product::getName, Collectors.toList())
    ));
âœ… Question 13: You have the following class:
You have a list of Employee objects. Each employee has a name, department, and salary.
Your task is to group employees by department and calculate the average salary for each department.

Solution :
Â Â Â Â Â Â Â  Map<String, Double> avgSalaryByDept = employees.stream()
Â Â Â Â Â Â Â Â Â Â Â  .collect(Collectors.groupingBy(
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Employee::getDepartment,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Collectors.averagingDouble(Employee::getSalary)
Â Â Â Â Â Â Â Â Â Â Â  ));


