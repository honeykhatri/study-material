âœ… Question 1: Filter Even Numbers
Problem:
Given a list of integers, use the Java Stream API to filter out only the even numbers and collect them into a new list.

Example Input:
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
Expected Output:
[2, 4, 6]
Answer:

Â Â Â Â Â Â Â  List<Integer> evenNumbers = numbers.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .filter(n -> n % 2 == 0)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .collect(Collectors.toList());
âœ… Question 2: Convert Strings to Uppercase
Problem:
Given a list of strings, use the Java Stream API to convert each string to uppercase and collect the results into a new list.

Example Input:
List<String> words = Arrays.asList("apple", "banana", "cherry");
Expected Output:
[APPLE, BANANA, CHERRY]

Answer: 
Â Â Â Â Â Â Â  List<String> uppercased = words.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .map(s -> s.toUpperCase())
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .collect(Collectors.toList());

âœ… Question 3: Count Strings Starting with a Specific Letter
Problem:
Given a list of strings, use the Java Stream API to count how many strings start with the letter "A" (case-insensitive).
Example Input:
List<String> names = Arrays.asList("Alice", "Bob", "Andrew", "alex", "Charlie");
Expected Output:

1 3
2
Answer:

Â Â Â Â Â Â Â  long count = names.stream()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .filter(s -> s.toLowerCase().startsWith("a"))
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  .count();



âœ… Question 4: You have the following class:
class Employee {
    private String name;
    private List<String> projects;

    // constructor, getters
}

And this list:

List<Employee> employees = Arrays.asList(
    new Employee("Alice", Arrays.asList("Alpha", "Beta")),
    new Employee("Bob", Arrays.asList("Beta", "Gamma")),
    new Employee("Charlie", Arrays.asList("Gamma", "Delta"))
);

ðŸ‘‰ Task: Use the Stream API to extract a List<String> of all unique project names across all employees.
Solution:
List<String> uniqueProjects = employees.stream()
    .flatMap(emp -> emp.getProjects().stream())
    .distinct()
    .collect(Collectors.toList());



âœ… Question 5: You have the following class:
class Order {
    private String id;
    private OrderStatus status;

    // constructor, getters
}

enum OrderStatus {
    NEW, IN_PROGRESS, COMPLETED
}
And a list of orders:
List<Order> orders = Arrays.asList(
    new Order("O1", OrderStatus.NEW),
    new Order("O2", OrderStatus.IN_PROGRESS),
    new Order("O3", OrderStatus.NEW),
    new Order("O4", OrderStatus.COMPLETED),
    new Order("O5", OrderStatus.NEW),
    new Order("O6", OrderStatus.IN_PROGRESS)
);

ðŸ‘‰ Task: Use the Stream API to group the orders by status and count how many orders are in each group. Your result should be a map like:
{NEW=3, IN_PROGRESS=2, COMPLETED=1}

Solution:
Map<OrderStatus, Long> orderCountByStatus = orders.stream()
    .collect(Collectors.groupingBy(
        Order::getOrderStatus,
        Collectors.counting()
    ));

âœ… Question 6: You have the following class:
Given:
class Product {
    private String name;
    private String category;

    // constructor, getters
}
and list:
List<Product> products = Arrays.asList(
    new Product("Laptop", "Electronics"),
    new Product("TV", "Electronics"),
    new Product("Apple", "Grocery"),
    new Product("Bread", "Grocery"),
    new Product("Smartphone", "Electronics")
);

ðŸ‘‰ Goal: Produce a Map<String, List<String>> where the key is the category and the value is a list of product names in that category.

Solution:
Map<String, List<String>> productsByCategory = products.stream()
    .collect(Collectors.groupingBy(
        Product::getCategory,
        Collectors.mapping(Product::getName, Collectors.toList())
    ));
