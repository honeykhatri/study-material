
Factory Method Design Pattern

The factory design pattern says that define an interface ( A java interface or an abstract class) and let the subclasses decide which object to instantiate.
The factory method in the interface lets a class defer the instantiation to one or more concrete subclasses
 It is one of the best ways to create an object where object creation logic is hidden to the client
 
 The name Factory method, that means there is a method which is a factory, and in general factories are involved with creational 
 stuff and here with this an object is being created
 
 Implementation: 
1. Define a factory method inside an interface. 
2. Let the subclass implements the above factory method and decide which object to create. 
In Java constructors are not polymorphic, but by allowing subclass to create an object, we are adding polymorphic behavior to the instantiation.
In short, we are trying to achieve Pseudo polymorphism by letting the subclass to decide what to create, and so this Factory method is also called as
Virtual constructor.


Real Time Example:

This design pattern has been widely used in JDK, such as 
1. getInstance() method of java.util.Calendar, NumberFormat, and ResourceBundle uses factory method design pattern. 
2. All the wrapper classes like Integer, Boolean etc, in Java uses this pattern to evaluate the values using valueOf() method. 
3. java.nio.charset.Charset.forName(), java.sql.DriverManager#getConnection(), java.net.URL.openConnection(), java.lang.Class.newInstance(),
java.lang.Class.forName() are some of ther example where factory method design pattern has been used.

Refer:https://www.geeksforgeeks.org/factory-method-design-pattern-in-java/
