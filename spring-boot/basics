Spring boot : Java based spring framework used for Rapid Application Development
              Extra support for auto configuration & embedded application server like tomcat,jetty.
              
              
Features of Spring boot application

1. Creates stand alone web application with minimal auto configuration.
2. Embedded tomcat, jetty which makes it code and run the application
3. Provide production ready features like health check , metrics and externalized configuration.
4. Absolutely no requirement for XML Configuration.



Advantages of Spring boot

1. Easy to understand and develop spring applications.
2. It is nothing just a existing framework with the addition of embeeded HTTP server and annotation configuration which makes it easier understand
   and faster the process of development.
3. Increases productivity and reduces development time.
4. Minimal configuration
5. We dont need to write XML configuration only a few annotations are required.



FOUR Key components of Spring Boot

1. Spring boot Auto Configuration
2. Spring boot CLI
3. Spring boot Actuators
4. Spring boot starter POMs



Spring boot vs Spring??

Following are the keypoints which spring boot offers but spring doesn't
1. Strater POM.
2. Spring boot actuators
3. Component scanning 
4. Auto configuration
5. Version management
6. Embedded server
7. InMemory DB


STARTER dependency of Spring boot?
Starter Dependencies: Spring boot starter is a maven template that has collection of relavant transitive depencies that are needed to start a particular functionaliy

Like if we need to import spring-boot-web-starter dependecny for creating a web application
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
</dependency>

Spring boot offers number of started dependencies,few of them are listed below
1. Web starter
2. Data JPA starter
3. Test starter
4. Thymeleaf starter
5. Mail starter
6. Security starter


HOW SPRING BOOT WORKS?
Spring boot automatically configures your application based on the dependencies you have added to the project. 
The entry point of the spring boot application is the class annotated with @SpringBootApplication and have a main method.
Spring boot automatically scans all the componrents in the project using @ComponentScan annotation.

- How it starts?
  Just like any other java program, spring boot application must have a main method. This method is the entry point of the application, which invokes
  SpringApplication#run  method to bootstrap the application
  
  @SpringBootApplication
  public class MainClass{
  public static void main(String[] args){
  SpringApplication.run(MainClass.class);
  //other statements
  }
  }
  
  Spring Boot CLI : Command line interface that allow you to create spring-based applications in Groovy. 
  
  
  SPRING BOOT DEPENDENCY MANAGEMENT
  It is used to manage dependencies and configuration without you specifying any version for any of that dependencies.
  
  
  NON-WEB APPLICATION IN SPRING BOOT ? HOW ? 
  By removing all the web dependecies from classpath and doing the way spring boot creates the application context.
  We need to implement CommandLineRunner interface and override run method to create a standalone application.
  
  
  
  Override or replace the Embedded tomcat server in Spring Boot?
  You can replace the Embedded tomcat server with any server by using starter dependency in POM file. For example to replace it with jetty server, 
  we need to add starter dependency " spring-boot-starter-jetty" 
  
  
  Disabling default web server in spring boot application?
  In application.properties
  spring.main.web-application-type=none
  
  
  Disable specific auto-configuration class?
  @EnableAutoConfiguration(exclude={className})
  
  ** Spring boot flow architecture : https://s3.ap-south-1.amazonaws.com/myinterviewtrainer-domestic/public_assets/assets/000/000/247/original/Spring_Boot_Flow_Architecture.png?1616151707
  
 
 ** DIFFERENCE BETWEEN @RequestMapping & @GetMapping
     RequestMapping can be used with GET,POST, PUT and many other methods by just using method attribute on annotation 
     Whereas, GetMapping is an extension of Requestmapping which gives clarity on the requestttpe.
     
 ** Profiles in SpringBoot 
    
While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment 
requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. 
Even if DBMS is the same across the environment, the URLs will be different.

To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.


** How to enable debugging log in the spring boot application?

Debugging logs can be enabled in three ways -

    We can start the application with --debug switch.
    We can set the logging.level.root=debug property in application.property file.
    We can set the logging level of the root logger to debug in the supplied logging configuration file.

Spring Boot

Main Class : -> class annotated with @SpringBootApplication -> this defines that this class being the route package for configuration by component scanning as well as bean configurations define within it.. 

We can put bean configuration In this class: 

When we get the build of the application (jar file) that file points to this main method

application.properties :: Here we define all the configurations properties for your application that you want to be stored in your application 

application.yml :: 

@SpringBootTest :: tells to load the configuration as part of this test

AutoConfiguration : Heart of Spring boot
We get a tomcat running without any configuration all because of auto config 
- @EnableAutoConfiguration - 
- 1. Allows configuration classes to be scanned dynamically into the application context.
- 2. It is based on the JARs loaded onto the class path usually via maven or gradle.
- 3. We can control the order of configuration by using couple of annotations like @AutoConfigureAfter & @AutoConfigureBefore.

Conditional Loading (built into dependencies itself ) 
- @ConditonalOnClass : Some configurations are only loaded when there are  classes specifically on the class path
- @ConditionalOnBean : Drives configuration of the presence of a bean define n the application context.
- @ConditonalOnProperties : Based on some properties being defined.
- @ConditionalOnMissinBean /Class/Properties 

Properties 
There are some preconfigured default properties for auto configuration classes.
@EnableConfigurationProperties specifies the default properties set. 
They can always be overridden.

Additional Conditional 
- Application type based
- Rsource based annotations (file)
- Expression based conditionals


CONFIGURING SPRING 

We can change configuration either at runtime or startup 
Ways to configure prop 
—application.properties or application.yml  (Development Focused)  ::  these files should be used for development or demo purpose only not preferred to be used in prod       environment .

— Environment variables : can be setup in app.properties 
— Command line parameter 
— Cloud Configurations (Config server, Consul) : we can change configuratons of an entire cloud native based app suite instead just of single application  (( PROD ))

Bean Configuration : much like prop we can add beans to defualt application class(main) , or by using separate configuration class.

Import XML based configuration classes ::  can be used for legacy application

Component scanning :  To get your beans Ito your app, by default all the beans contained in the default package and subpage would be loaded unless it is said to disable some bean.


SPRING PROFILES
— WHY ??  






  
  
  
  
  





              
              
              
