
Exception handling in spring 

Spring provide us some tools to handle exceptions beyond simple try-catch, 
Annotaions used to use these tools, these annotations allow us to use exceptions handling as cross cutting concern.

> @ResponseStatus
> @ExceptionHandler
> @ControllerAdvice

With default behavior of spring handled exceptions, we dont get a proper descriptive response load; we can not detect the acatual exception occured by that response 
payload 

Eg; 
{
  "timestamp": "2020-11-28T13:24:02.239+00:00",
  "status": 500,
  "error": "Internal Server Error",
  "message": "",
  "path": "/product/1"
}

NO MESSAGE
We can see that besides a well-formed error response, the payload is not giving us any useful information. Even the message field is empty, which we might want to contain something like “Item with id 1 not found”.

Spring Boot provides some properties with which we can add the exception message, exception class, or even a stack trace as part of the response payload:
server:
  error:
  include-message: always
  include-binding-errors: always
  include-stacktrace: on_trace_param
  include-exception: false

Using these properties in our properties file we can alter the response payload to some extent.; 
NOTE: include-stacktrace=on_trace_param means that only if we pass trace param in the URL(?trace=true), we'll get stack trace in response payload; we should set its 
value to "never" in PROD enviroment as it may reveal internal implementation.


We are not getting proper error code with all this configuration, to do that we can use the annotations

1. @RESPONSESTATUS

@ResponseStatus allows us to modify the HTTP status of our response.
t can be applied in the following places:

    On the exception class itself
    Along with the @ExceptionHandler annotation on methods
    Along with the @ControllerAdvice annotation on classes
    
   >> On the exception class itself    >> 
    @ResponseStatus(value = HttpStatus.NOT_FOUND)
public class NoSuchElementFoundException extends RuntimeException {
  ...
}
OR
public class NoSuchElementFoundException extends ResponseStatusException {

  public NoSuchElementFoundException(String message){
    super(HttpStatus.NOT_FOUND, message);
  }

  @Override
  public HttpHeaders getResponseHeaders() {
      // return response headers
  }
}

@ResponseStatus, in combination with the server.error configuration properties, allows us to manipulate almost all the fields in our 
Spring-defined error response payload.

2. @ExceptionHandler

This allow us to modify structure of response payload.

We need to create a method in either in controller itself or in @ControllerAdvice class and annotate it with @ExceptionHandler

@ExceptionHandler(NoSuchElementFoundException.class)
  @ResponseStatus(HttpStatus.NOT_FOUND)
  public ResponseEntity<String> handleNoSuchElementFoundException(
      NoSuchElementFoundException exception
  ) {
    return ResponseEntity
        .status(HttpStatus.NOT_FOUND)
        .body(exception.getMessage());
  }
  
  
  **Catch-All Exception Handler
  try{
  performSomeOperation();
} catch(OperationSpecificException ex){
  //...
} catch(Exception catchAllExcetion){
  //...  
}
As a cautionary measure, we often surround our top-level method’s body with a catch-all try-catch exception handler block, 
to avoid any unwanted side effects or behavior. The handleAllUncaughtException() method in our controller behaves similarly. 
It will catch all the exceptions for which we don’t have a specific handler.

@ExceptionHandler(Exception.class)
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public ResponseEntity<ErrorResponse> handleAllUncaughtException(
      Exception exception, 
      WebRequest request){
    log.error("Unknown error occurred", exception);
    return buildErrorResponse(
        exception,
        "Unknown error occurred", 
        HttpStatus.INTERNAL_SERVER_ERROR, 
        request
    );
  }

Q: What if these same exceptions are being thrown by other controllers too? How do we handle those?
Do we create the same handlers in all controllers or create a base class with common handlers and extend it in all controllers? -- @ControllerAdvice 

3. @ControllerAdvice

 @ControllerAdvice allow us to apply the exception handlers to more than one controllers in our application 
 
 ** The term advice comes from AOP which allow us to add cross cutting code(advice) around existing methods.
    The controller advice allow us to intercept and modify the return values of controller methods which in our case to handle exceptions.
    
    > We create a GlobalExceptionHandler class which extends ResponseEntityExceptionHandler
    https://github.com/thombergs/code-examples/blob/master/spring-boot/exception-handling/src/main/java/io/reflectoring/exception/exception/GlobalExceptionHandler.java
    
    If we want to selectoively apply the handler or limit the scope of controller advice we can use the properties provided by the annotation
    1, @ControllerAdvice("com.package.name.to.allow"): we can pass a package name or list of package names in the annotation’s value or basePackages parameter. With this, the controller advice will only 
    handle exceptions of this package’s controllers.
    
    2. @ControllerAdvice(annotations = Advised.class): only controllers marked with the @Advised annotation will be handled by the controller advice.
    
      --
--------> ResponseEntityExceptionHandler: ResponseEntityExceptionHandler is a convenient base class for controller advice classes.
It provides exception handlers for internal Spring exceptions. If we don’t extend it, then all the exceptions will be redirected 
to DefaultHandlerExceptionResolver which returns a ModelAndView object


Handling NoHandlerFoundException Requires a Few Extra Steps

This exception occurs when you try to call an API that doesn't exist in the system. Despite us implementing its handler via ResponseEntityExceptionHandler class the exception is redirected to DefaultHandlerExceptionResolver.

To redirect the exception to our advice we need to set a couple of properties in the the properties file: spring.mvc.throw-exception-if-no-handler-found=true and spring.web.resources.add-mappings=false

How Does Spring Process The Exceptions?
https://reflectoring.io/assets/img/posts/spring-exception-handling/spring-exception-handling-mechanism.png

    
    
    
 




